<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Runs the Job DSL generator to create the pipeline. Also sets up the initial gemset, and runs a Cucumber test to ensure that the jobs were correctly created.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.21">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@1.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name></name>
        <refspec></refspec>
        <url><%= @source_repo %></url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/<%= @branch_specifier %></name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <useShallowClone>false</useShallowClone>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>true</skipTag>
    <includedRegions></includedRegions>
    <scmName></scmName>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <authToken>5a6ee9d0e05f2521d618501f9b88f637</authToken>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># do this stuff first, since once the trigger job exists, it&apos;s going to try to run
# when it runs it&apos;s going to try to do a bundle install, and these two jobs will step on each other&apos;s feet
gem install bundler
bundle install 
</command>
    </hudson.tasks.Shell>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.22">
      <targets>pipeline/jobs/jobdsl.groovy</targets>
      <usingScriptText>false</usingScriptText>
      <ignoreExisting>false</ignoreExisting>
      <removedJobAction>IGNORE</removedJobAction>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
    <hudson.tasks.Shell>
      <command>export host=&quot;localhost&quot;
export user=&quot;ec2-user&quot;


bundle exec cucumber --color \
         --format json \
         --out jenkins_cucumber.json \
         --tag @pipeline \
         <% if ! node['jenkins']['opsworks'] -%>
         --tag ~@opsworks \
         <% end -%>
         pipeline/features
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <net.masterthought.jenkins.CucumberReportPublisher plugin="cucumber-reports@0.0.21">
      <jsonReportDirectory></jsonReportDirectory>
      <pluginUrlPath></pluginUrlPath>
      <skippedFails>false</skippedFails>
      <undefinedFails>false</undefinedFails>
      <noFlashCharts>false</noFlashCharts>
    </net.masterthought.jenkins.CucumberReportPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.3.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <ruby-proxy-object>
      <ruby-object ruby-class="Jenkins::Plugin::Proxies::BuildWrapper" pluginid="rvm">
        <pluginid pluginid="rvm" ruby-class="String">rvm</pluginid>
        <object ruby-class="RvmWrapper" pluginid="rvm">
          <impl pluginid="rvm" ruby-class="String">1.9.3</impl>
        </object>
      </ruby-object>
    </ruby-proxy-object>
  </buildWrappers>
</project>